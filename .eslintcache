[{"E:\\PROJECTS\\dash-v2\\src\\index.js":"1","E:\\PROJECTS\\dash-v2\\src\\App.js":"2","E:\\PROJECTS\\dash-v2\\src\\reportWebVitals.js":"3","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\background\\Background.js":"4","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\background\\BackgroundInputs.js":"5","E:\\PROJECTS\\dash-v2\\src\\data\\backgroundData.js":"6","E:\\PROJECTS\\dash-v2\\src\\data\\themeData.js":"7","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\Theme.js":"8","E:\\PROJECTS\\dash-v2\\src\\data\\widgetData.js":"9","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\Search.js":"10","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\Widget.js":"11","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\CurrentWidgets.js":"12","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\WidgetSettings.js":"13","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\weather\\Weather.js":"14","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\weather\\WeatherIcons.js":"15","E:\\PROJECTS\\dash-v2\\src\\context\\WidgetContext.js":"16","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\Setting.js":"17","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\AddWidgets.js":"18","E:\\PROJECTS\\dash-v2\\src\\context\\SettingsContext.js":"19","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\AddWidgetItem.js":"20","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\SettingsModal.js":"21","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\SettingsToggle.js":"22","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\Setting.js":"23","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\Tabs.js":"24","E:\\PROJECTS\\dash-v2\\src\\context\\BackgroundContext.js":"25","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\EditButtons.js":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":2865,"mtime":1612452065200,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":2453,"mtime":1612454789716,"results":"31","hashOfConfig":"28"},{"size":5690,"mtime":1612455399623,"results":"32","hashOfConfig":"28"},{"size":16697,"mtime":1608625442703,"results":"33","hashOfConfig":"28"},{"size":830,"mtime":1613845569948,"results":"34","hashOfConfig":"28"},{"size":777,"mtime":1613845914441,"results":"35","hashOfConfig":"28"},{"size":875,"mtime":1612464440091,"results":"36","hashOfConfig":"28"},{"size":1832,"mtime":1613843966922,"results":"37","hashOfConfig":"28"},{"size":305,"mtime":1613843944354,"results":"38","hashOfConfig":"28"},{"size":2546,"mtime":1613844134218,"results":"39","hashOfConfig":"28"},{"size":3124,"mtime":1613843306598,"results":"40","hashOfConfig":"28"},{"size":10125,"mtime":1613843955230,"results":"41","hashOfConfig":"28"},{"size":1626,"mtime":1608625192394,"results":"42","hashOfConfig":"28"},{"size":954,"mtime":1611801720216,"results":"43","hashOfConfig":"28"},{"size":7135,"mtime":1612655146263,"results":"44","hashOfConfig":"28"},{"size":3639,"mtime":1612464647760,"results":"45","hashOfConfig":"28"},{"size":425,"mtime":1612465006043,"results":"46","hashOfConfig":"28"},{"size":3400,"mtime":1612464640259,"results":"47","hashOfConfig":"28"},{"size":7559,"mtime":1613846583320,"results":"48","hashOfConfig":"28"},{"size":2832,"mtime":1612465021969,"results":"49","hashOfConfig":"28"},{"size":2436,"mtime":1611633649079,"results":"50","hashOfConfig":"28"},{"size":2272,"mtime":1612454558458,"results":"51","hashOfConfig":"28"},{"size":1003,"mtime":1612452484160,"results":"52","hashOfConfig":"28"},{"size":1845,"mtime":1613919369689,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1qdhob8",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\PROJECTS\\dash-v2\\src\\index.js",[],["118","119"],"E:\\PROJECTS\\dash-v2\\src\\App.js",["120"],"import { useState, useContext } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport Lockr from 'lockr';\nimport SettingsModal from './components/settings/modal/SettingsModal';\nimport themeData from './data/themeData';\nimport CurrentWidgets from './components/widgets/CurrentWidgets';\nimport AddWidgets from './components/settings/widgets/AddWidgets';\nimport { WidgetProvider } from './context/WidgetContext';\nimport { SettingsProvider } from './context/SettingsContext';\nimport { BackgroundProvider } from './context/BackgroundContext';\n\n// MAKE HOOKS\n  // ADD WIDGET HOOK\n  // FETCH DATA HOOK - updates every 15mins\n\n// make WidgetsSettings toggle buttons if only one allowed\n// if multiple allowed show show add button\n  //https://mir-s3-cdn-cf.behance.net/project_modules/max_1200/48029d70302039.5ba15c1f0af95.png\n\n// Figure out general grid layout - columns & breakpoints\n  // https://github.com/STRML/react-grid-layout\n\n// Make default components:\n\n  // Weather - Current weather, 7 day forecast\n    // Increment for multiple weather widgets\n\n  // Quick Links\n    // Use api for icons and store in IndexedDB - library?\n      // https://www.npmjs.com/package/react-indexed-db\n      // or\n      // google: indexeddb library\n\n  // Time - Current location or specified location\n\n// use global styles for common styling and THEME\n  //https://styled-components.com/docs/api#createglobalsty\n  // https://css-tricks.com/theming-and-theme-switching-with-react-and-styled-components/\n\n// FIX SCROLLING WHEN ADDING ELEMENTS\n  // Background is fixed & widgets are scrollable\n\n// useContext to solve theme prop drilling??\n\n// Fix widget incrementing when deleting - before reload id is one more than it should be\n\n// New settings UI\n  // Top of settings menu: \n    // Add widget - Opens overlay of avalible widgets in categories\n      // When adding the menu doesn't close for the abilty to add multiple\n      // Add button & Preview Button on single widgets\n    // Edit Widgets - Opens overlay of current widgets with gear icon and delete icon in top left corner\n\n    // auto close setting drop down when another drop down is focused\n\n// Retain url bar auto focus when hitting new tab\n\nfunction App() {\n  const [theme, setTheme] = useState(Lockr.get('theme', 'dark'));\n\n  const changeTheme = (newTheme) => {\n    setTheme(newTheme);\n  }\n\n  return (\n    <div className='App' id='app'>\n      <WidgetProvider >\n        <ThemeProvider theme={themeData[theme]} >\n          <SettingsProvider>\n            <BackgroundProvider>\n              <SettingsModal \n                themeState={theme}\n                changeTheme={changeTheme} \n              />\n            </BackgroundProvider>\n            <CurrentWidgets />\n            <AddWidgets />\n          </SettingsProvider>\n        </ThemeProvider>\n      </WidgetProvider>\n    </div>\n  );\n}\n\nexport default App;","E:\\PROJECTS\\dash-v2\\src\\reportWebVitals.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\settings\\background\\Background.js",["121"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport Lockr from 'lockr';\r\nimport backgroundData from '../../../data/backgroundData';\r\nimport { BackgroundContext } from '../../../context/BackgroundContext';\r\nimport BackgroundInputs from './BackgroundInputs';\r\n\r\nconst BackgroundsContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(170px, 1fr));\r\n  grid-gap: 16px;\r\n  justify-items: center;\r\n  column-gap: 8px;\r\n  row-gap: 8px;\r\n`;\r\n\r\nconst BackgroundImage = styled(motion.div)`\r\n  width: 170px;\r\n  height: 100px;\r\n  border-radius: 5px;\r\n  background-image: url(${props => props.img});\r\n  background-size: cover;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ImageOverlay = styled(motion.div)`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  opacity: 0;\r\n\r\n  & h2 {\r\n    margin: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n`\r\n\r\nconst BackgroundTile = ({ img, onClick, name }) => {\r\n  const [hover, setHover] = useState();\r\n\r\n  return (\r\n    <BackgroundImage\r\n      img={img} \r\n      onClick={onClick}\r\n      whileTap={{\r\n        scale: 0.95,\r\n      }}\r\n    >\r\n      <ImageOverlay\r\n        whileHover={{\r\n          opacity: 1,\r\n        }}\r\n        onHoverStart={() => setHover(true)}\r\n        onHoverEnd={() => setHover(false)}\r\n      >\r\n        <motion.h2\r\n          animate={{ y: hover ? 30 : 0}}\r\n        >\r\n          {name}\r\n        </motion.h2>\r\n      </ImageOverlay>\r\n    </BackgroundImage>\r\n  )\r\n}\r\n\r\nconst Background = () => {\r\n  const [background, setBackground] = useContext(BackgroundContext);\r\n  const [storedBackground, setStoredBackground] = useState(Lockr.get('storedBackground', 0));\r\n\r\n  return (\r\n    <div>\r\n      <BackgroundsContainer>\r\n        {backgroundData.map(({ name, backgroundEffect, img }, i) => \r\n          <BackgroundTile \r\n            key={i}\r\n            img={img}\r\n            name={name}\r\n            onClick={() => {\r\n              setBackground(backgroundEffect());\r\n              Lockr.set('storedBackground', i);\r\n              setStoredBackground(Lockr.get('storedBackground'));\r\n            }}\r\n          />\r\n        )}\r\n      </BackgroundsContainer>\r\n      <BackgroundInputs  background={background} storedBackground={storedBackground} />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Background;","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\background\\BackgroundInputs.js",[],"E:\\PROJECTS\\dash-v2\\src\\data\\backgroundData.js",[],"E:\\PROJECTS\\dash-v2\\src\\data\\themeData.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\settings\\Theme.js",[],"E:\\PROJECTS\\dash-v2\\src\\data\\widgetData.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\Search.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\Widget.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\CurrentWidgets.js",["122"],"import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport { DragIndicator } from '@styled-icons/material/DragIndicator';\r\nimport '../../../node_modules/react-grid-layout/css/styles.css';\r\nimport '../../../node_modules/react-resizable/css/styles.css';\r\nimport { WidthProvider, Responsive } from \"react-grid-layout\";\r\nimport { WidgetContext } from '../../context/WidgetContext';\r\nimport EditButtons from './EditButtons';\r\n\r\nconst DragIcon = styled(DragIndicator)`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  padding: 5px;\r\n  color: ${({ theme }) => theme.color};\r\n  cursor: grab;\r\n\r\n  &:active {\r\n    cursor: grabbing;\r\n  }\r\n`;\r\n\r\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\r\nconst originalLayouts = getFromLS(\"layouts\") || {};\r\n\r\nclass CurrentWidgets extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      layouts: JSON.parse(JSON.stringify(originalLayouts))\r\n    };\r\n  }\r\n  onLayoutChange(layout, layouts) {\r\n    // saveToLS(\"layouts\", layouts);\r\n    this.setState({ layouts });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ResponsiveReactGridLayout\r\n          className=\"layout\"\r\n          cols={{xl: 18, lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\r\n          breakpoints={{xl: 1950, lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0}}\r\n          rowHeight={30}\r\n          layouts={this.state.layouts}\r\n          draggableHandle={'.handle'}\r\n          onLayoutChange={(layout, layouts) =>\r\n            this.onLayoutChange(layout, layouts)\r\n          }\r\n          compactType={null}\r\n          preventCollision={true}\r\n        >\r\n          {this.context[0].map(({name, display, layout, el}) => (\r\n            //display &&\r\n            <div key={name} data-grid={layout} >\r\n              {el}\r\n              <DragIcon className='handle' size='24' />\r\n              <EditButtons />\r\n            </div>\r\n          )).filter((widget) => widget !== undefined)}\r\n        </ResponsiveReactGridLayout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCurrentWidgets.contextType = WidgetContext;\r\n\r\nfunction getFromLS(key) {\r\n  let ls = {};\r\n  if (global.localStorage) {\r\n    try {\r\n      ls = JSON.parse(global.localStorage.getItem(\"widgets\")) || {};\r\n    } catch (e) {\r\n      /*Ignore*/\r\n    }\r\n  }\r\n  return ls[key];\r\n}\r\n\r\n// saves layouts to local storage\r\nfunction saveToLS(key, value) {\r\n  if (global.localStorage) {\r\n    global.localStorage.setItem(\r\n      \"widgets\",\r\n      JSON.stringify({\r\n        [key]: value\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentWidgets;","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\WidgetSettings.js",["123","124","125","126"],"import { useContext, useState } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { AddCircle } from '@styled-icons/ionicons-outline/AddCircle';\r\nimport { EditAlt } from '@styled-icons/boxicons-regular/EditAlt';\r\nimport { motion } from 'framer-motion';\r\nimport _ from 'lodash';\r\nimport { SettingsContext } from '../../../context/SettingsContext';\r\nimport widgetData from '../../../data/widgetData';\r\nimport Setting from './Setting';\r\nimport AddWidgetItem from './AddWidgetItem';\r\n\r\n// const SettingsContainer = styled.div`\r\n//   display: grid;\r\n//   grid-template-columns: 1fr;\r\n//   row-gap: 8px;\r\n//   column-gap: 8px;\r\n//   align-items: center;\r\n//   justify-items: center;\r\n//   margin: 16px 0px;\r\n// `;\r\n\r\nconst SettingsContainer = styled.div`\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst WidgetSetting = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 40px;\r\n  margin-top: 8px;\r\n  border: 1px solid ${({ theme }) => theme.border};\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst WidgetHeading = styled.h4`\r\n  margin: 0;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst AddIcon = styled(AddCircle)`\r\n  margin: 0 12px 0 16px;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst EditIcon = styled(EditAlt)`\r\n  margin: 0 12px 0 16px;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  grid-gap: 16px;\r\n  margin: 16px 0;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst WidgetSettings = () => {\r\n  const theme = useContext(ThemeContext);\r\n  const [, setSettings] = useContext(SettingsContext);\r\n\r\n  const handleEditWidgets = () => {\r\n    setSettings({\r\n      drawer: false,\r\n      editWidgets: true,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <SettingsContainer>\r\n      <WidgetSetting \r\n        whileHover={{\r\n          scale: 1.02,\r\n          backgroundColor: theme.highlight,\r\n        }} \r\n        onClick={handleEditWidgets}\r\n      >\r\n        <EditIcon size='24' />\r\n        <WidgetHeading>Edit Widgets</WidgetHeading>\r\n      </WidgetSetting>\r\n      <Grid>\r\n        {\r\n          widgetData.map(({ name, icon, multiple }, i) => {\r\n            return (\r\n              <AddWidgetItem \r\n                key={i}\r\n                name={name} \r\n                icon={icon} \r\n                multiple={multiple} \r\n              />\r\n            )\r\n          })\r\n        }\r\n      </Grid>\r\n\r\n      {/* \r\n        Widget categories & widgets in that category under heading\r\n          Misc, Weather, Productivity\r\n      */}\r\n\r\n      {/* {widgetData.map(({ name, display, icon, multiple }, i) => {\r\n        const formatedName = _.startCase(name);\r\n        \r\n        return (\r\n          <Setting \r\n           key={i}\r\n           display={display} \r\n           icon={icon}\r\n           formatedName={formatedName}\r\n           multiple={multiple}\r\n           name={name}\r\n          />\r\n        )\r\n      })} */}\r\n    </SettingsContainer>\r\n  )\r\n};\r\n\r\nexport default WidgetSettings;","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\weather\\Weather.js",["127"],"import { useState, useEffect, useContext } from 'react';\r\nimport _ from 'lodash';\r\nimport { motion } from 'framer-motion';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { Location } from '@styled-icons/ionicons-outline/Location';\r\nimport { ArrowForward } from '@styled-icons/material-rounded/ArrowForward';\r\nimport Lockr from 'lockr';\r\nimport Widget from '../Widget';\r\nimport WeatherIcons from  './WeatherIcons';\r\n\r\nconst WeatherWidget = styled(Widget)`\r\n  flex-direction: column;\r\n`;\r\n\r\nconst CityForm = styled.form`\r\n  width: 80%;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border: 2px solid ${({ theme }) => theme.border};\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst CityInput = styled.input`\r\n  height: 100%;\r\n  width: 80%;\r\n  padding: 5px;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  color: ${({ theme }) => theme.color};\r\n  border: none;\r\n  font-size: 1rem;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &::placeholder {\r\n    color: ${({ theme }) => theme.color};\r\n  }\r\n`;\r\n\r\nconst CityArrowContainer = styled(motion.button)`\r\n  display: inline-block;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  width: 20%;\r\n  border-radius: 5px;\r\n  border: none;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CityArrow = styled(ArrowForward)`\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst CurrentLocation = styled(motion.div)`\r\n  width: 80%;\r\n  height: 40px; \r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin-top: 8px;\r\n  border-radius: 5px;\r\n  color: ${({ theme }) => theme.color};\r\n  cursor: pointer;\r\n\r\n  & p {\r\n    width: 77.5%;\r\n    padding: 8px;\r\n  }\r\n`;\r\n\r\nconst LocationIcon = styled(Location)`\r\n  color: ${({ theme }) => theme.color};\r\n  width: 22.5%;\r\n`;\r\n\r\nconst CityHeading = styled.h2`\r\n  margin: 0;\r\n  color: ${({ theme }) => theme.color};\r\n  font-size: 2rem;\r\n`;\r\n\r\nconst WeatherContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 55%;\r\n`;\r\n\r\nconst TempIconContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100px;\r\n`;\r\n\r\nconst Temperature = styled.p`\r\n  position: relative;\r\n  margin: 0;\r\n  color: ${({ theme }) => theme.color};\r\n  font-size: 1.5rem;\r\n\r\n  & span {\r\n    position: absolute;\r\n    top: 2px;\r\n    right: -16px;\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst LoadAnimation = styled(motion.div)`\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n\r\n  & div {\r\n    width: 10px;\r\n    height: 10px;\r\n    background-color: ${({ theme }) => theme.color};\r\n    border-radius: 100%;\r\n  }\r\n`;\r\n\r\nconst loadAnimationVariants = {\r\n  start: {\r\n    transition: {\r\n      staggerChildren: 0.2,\r\n    },\r\n  },\r\n  end: {\r\n    transition: {\r\n      staggerChildren: 0.2\r\n    },\r\n  },\r\n}\r\n\r\nconst loadCircleTransition = {\r\n  duration: 0.5,\r\n  yoyo: Infinity,\r\n  ease: 'easeInOut',\r\n}\r\n\r\nconst loadCircleVariants = {\r\n  start: {\r\n    y: '0%',\r\n  }, \r\n  end: {\r\n    y: '100%',\r\n  },\r\n}\r\n\r\nconst useFetch = (url, display) => {\r\n  const [status, setStatus] = useState('idle');\r\n  const [data, setData] = useState(undefined);\r\n\r\n  console.log(status);\r\n\r\n  // initial weather api fetch\r\n  useEffect(() => {\r\n    if (!url) return;\r\n\r\n    const fetchData = async () => {\r\n      setStatus('fetching');\r\n\r\n      const response = await fetch(url);\r\n\r\n      const data = await response.json();\r\n      setData(data);\r\n      console.log(data);\r\n      setStatus('fetched');\r\n    }\r\n\r\n    fetchData();\r\n  }, [url]);\r\n    \r\n  // setInterval to check if weather has been updated in the last 15mins\r\n  useEffect(() => {\r\n    const updateInterval = setInterval(() => {\r\n      console.log('check api time diff')\r\n      const apiTime = Lockr.get(`currentWeather-apiTime`, undefined);\r\n      const timeDiff = apiTime && Math.round((Date.now() - apiTime) / 1000);\r\n\r\n      // set url to city by default\r\n      const city = Lockr.get(`city-${display}`, undefined);\r\n      const defaultUrl = url ?  url : `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=42ebabdd4868e27ab24302546199950b`;\r\n\r\n      const fetchData = async () => {\r\n        setStatus('fetching');\r\n  \r\n        const response = await fetch(defaultUrl);\r\n  \r\n        const data = await response.json();\r\n        setData(data);\r\n        console.log(data);\r\n        setStatus('fetched');\r\n      }\r\n\r\n      if(timeDiff >= 900) {\r\n        console.log('update weather');\r\n        fetchData();\r\n        Lockr.set('currentWeather-apiTime', Date.now());\r\n      }\r\n\r\n    }, 10000);\r\n\r\n    return () => {\r\n      clearInterval(updateInterval);\r\n    }\r\n  });\r\n\r\n  return { status, data };\r\n}\r\n\r\n// USE PRCESS.ENV FOR API KEY\r\n\r\n// FIX USEEFFECT MISSING DEPENDENCIES\r\n\r\n// -------------------------\r\n// FIX API CALL EVERY 15MINS\r\n// -------------------------\r\n\r\n// remove state in display?\r\n\r\n// USE LOADING ANIMATION FOR WEATHER FETCH\r\n  // https://www.robinwieruch.de/react-hooks-fetch-data\r\n\r\n\r\nconst Weather = () => {\r\n  const [display] = useState(parseInt(_.uniqueId(), 10) / 2);\r\n  // const [weatherData, setWeatherData] = useState({\r\n  //   city: Lockr.get(`city-${display}`, undefined),\r\n  //   temp: Lockr.get(`temp-${display}`, undefined),\r\n  //   icon: Lockr.get(`icon-${display}`, undefined),\r\n  // });\r\n  const [weatherData, setWeatherData] = useState(Lockr.get(`currentWeather-${display}`, undefined));\r\n  const [city, setCity] = useState('');\r\n  // if geolocation true\r\n    // use lat and long\r\n  // else use city\r\n  const [url, setUrl] = useState();\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  // use status in return - \r\n    //idle for inputs, fetching for load, fetched for data render\r\n  // use data for weatherData state & LS values\r\n  // setInterval using apiTime state\r\n  const geoLocation = Lockr.get(`geoLocation-${display}`);\r\n  const { status, data } = useFetch(url, geoLocation, display);\r\n\r\n  useEffect(() => {\r\n    const renderWeatherData = () => {\r\n      if (!data) return;\r\n      // update weatherData state\r\n      setWeatherData({\r\n        city: data.name,\r\n        temp: Math.round(data.main.temp),\r\n        icon: data.weather[0].icon,\r\n      });\r\n\r\n      // Set LS values\r\n      // Lockr.set(`currentWeather-apiTime`, Date.now());\r\n      // Lockr.set(`city-${display}`, data.name);\r\n      // Lockr.set(`temp-${display}`, Math.round(data.main.temp));\r\n      // Lockr.set(`icon-${display}`, data.weather[0].icon);\r\n      Lockr.set(`currentWeather-${display}`, {\r\n        city: data.name,\r\n        temp: Math.round(data.main.temp),\r\n        icon: data.weather[0].icon,\r\n      });\r\n      // Lockr.set(`currentWeather-${display}`, {\r\n      //   city: data.name,\r\n      //   temp: Math.round(data.main.temp),\r\n      //   icon: data.weather[0].icon,\r\n      // });\r\n      console.log('updated weather')\r\n    }\r\n\r\n    renderWeatherData();\r\n  }, [data]);\r\n\r\n  function getGeolocation() {\r\n    navigator.permissions.query({\r\n      name: 'geolocation'\r\n    }).then((result) => { \r\n      if (result.state === 'denied') {\r\n        alert('Enable location permission to use current location');\r\n      }\r\n    });\r\n\r\n    if(navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        // get coords\r\n        const long = position.coords.longitude;\r\n        const lat = position.coords.latitude;\r\n\r\n        Lockr.set(`geoLocation-${display}`, true);\r\n\r\n        // use coords in api link state\r\n        setUrl(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=imperial&appid=42ebabdd4868e27ab24302546199950b`);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  }\r\n\r\n  const handleCitySubmit = (e) => {\r\n    e.preventDefault();\r\n    if(city === '') return;\r\n    setUrl(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=42ebabdd4868e27ab24302546199950b`);\r\n  }\r\n\r\n  return (\r\n    <WeatherWidget>\r\n      {\r\n        status === 'fetching' ?\r\n        <LoadAnimation\r\n          variants={loadAnimationVariants}\r\n          initial='start'\r\n          animate='end'\r\n        >\r\n          <motion.div \r\n            variants={loadCircleVariants}\r\n            transition={loadCircleTransition}\r\n          />\r\n          <motion.div \r\n            variants={loadCircleVariants}\r\n            transition={loadCircleTransition}\r\n          />\r\n          <motion.div \r\n            variants={loadCircleVariants}\r\n            transition={loadCircleTransition}\r\n          />\r\n        </LoadAnimation> :\r\n        weatherData ? \r\n        <WeatherContainer>\r\n          <CityHeading>{weatherData.city}</CityHeading>\r\n          <TempIconContainer>\r\n            <Temperature>{weatherData.temp}<span>&#176;F</span></Temperature>\r\n            <WeatherIcons icon={weatherData.icon} />\r\n          </TempIconContainer>\r\n        </WeatherContainer> :\r\n        <>\r\n          <CityForm\r\n            onSubmit={handleCitySubmit}\r\n          >\r\n            <CityInput \r\n              type='text' \r\n              placeholder='Enter a city' \r\n              onChange={handleCityChange}\r\n              value={city}\r\n            />\r\n            <CityArrowContainer \r\n              type='submit'\r\n              whileHover={{\r\n                backgroundColor: theme.highlight,\r\n              }}\r\n              whileTap={{\r\n                scale: .95,\r\n              }}\r\n            >\r\n              <CityArrow size='24' />\r\n            </CityArrowContainer>\r\n          </CityForm>\r\n          <CurrentLocation\r\n            onClick={() => getGeolocation()} // handleLocationClick\r\n            whileHover={{\r\n              backgroundColor: theme.highlight,\r\n            }}\r\n            whileTap={{\r\n              scale: .95,\r\n            }}\r\n          >\r\n            <p>Use current location</p>\r\n            <LocationIcon size='30' />\r\n          </CurrentLocation>\r\n        </>\r\n      }\r\n    </WeatherWidget>\r\n  )\r\n};\r\n\r\nexport default Weather;","E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\weather\\WeatherIcons.js",[],"E:\\PROJECTS\\dash-v2\\src\\context\\WidgetContext.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\Setting.js",["128"],"import { useState, useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { DeleteOutline } from '@styled-icons/material/DeleteOutline';\r\nimport { AddCircle } from '@styled-icons/ionicons-outline/AddCircle';\r\nimport { motion } from 'framer-motion';\r\nimport _ from 'lodash';\r\nimport Lockr from 'lockr';\r\nimport widgetData from '../../../data/widgetData';\r\nimport { WidgetContext } from '../../../context/WidgetContext';\r\n\r\nconst SettingContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 80%;\r\n  height: 40px;\r\n  margin: 0 20px;\r\n  padding: 8px;\r\n  border: 2px solid ${({ theme }) => theme.border};\r\n  border-radius: 5px;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst SettingContent = styled.div`\r\n  display: flex;\r\n  justify-content: baseline;\r\n  align-items: center;\r\n`;\r\n\r\nconst SettingName = styled.p`\r\n  margin: 0;\r\n  margin-left: 16px;\r\n`;\r\n\r\nconst AddContainer = styled(motion.div)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst AddIcon = styled(AddCircle)`\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst Add = ({ addWidget, name }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <AddContainer\r\n      whileHover={{\r\n        backgroundColor: theme.highlight,\r\n      }}\r\n      whileTap={{\r\n        scale: 0.95,\r\n      }}\r\n      onTap={() => addWidget(name)}\r\n    >\r\n      <AddIcon size='32' />\r\n    </AddContainer>\r\n  )\r\n}\r\n\r\nconst ToggleButton = styled(motion.button)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst ToggleCircle = styled(motion.div)`\r\n  width: 26px;\r\n  height: 26px;\r\n  background-color: ${({ theme }) => theme.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst MultipleList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 75%;\r\n\r\n  & div {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    padding: 5px;\r\n    margin-bottom: 4px;\r\n    border: 1px solid ${({ theme }) => theme.border};\r\n    border-radius: 5px;\r\n    color: ${({ theme }) => theme.color};\r\n\r\n    & p {\r\n      margin: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Delete = styled(DeleteOutline)`\r\n  color: #dc3545;\r\n`;\r\n\r\nconst Setting = ({ display, formatedName, multiple, icon, name }) => {\r\n\r\n  const [toggled, setToggled] = useState(display);\r\n  const [widgets, setWidgets] = useContext(WidgetContext);\r\n\r\n  const toggleWidget = (widgetName) => {\r\n    const currentWidget = widgetData.filter(widget => widget.name === widgetName);\r\n\r\n    if(!currentWidget[0].display) {\r\n      currentWidget[0].display = true;\r\n      Lockr.set(`${currentWidget[0].name}-display`, true);\r\n      setWidgets(state => [...state, ...currentWidget])\r\n    } else {\r\n      currentWidget[0].display = false;\r\n      Lockr.set(`${currentWidget[0].name}-display`, false);\r\n      setWidgets(state => state.filter(widget => widget.name !== currentWidget[0].name));\r\n    }\r\n  }\r\n\r\n  const addWidget = (widgetName) => {\r\n    // map widgets to get widget selected to add\r\n    const newWidget = widgetData.map((widget) => {\r\n      if (widget.name === widgetName) {\r\n        widget.display++\r\n        Lockr.set(`${widgetName}-display`, widget.display);\r\n        return {\r\n          ...widget,\r\n          name: `${widgetName}-${widget.display}`,\r\n        };\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }).filter(wid => wid !== undefined);\r\n\r\n    setWidgets(state => [...state, ...newWidget]);\r\n  }\r\n\r\n  // delete widget function for widgets allowed to have multiple\r\n  const deleteWidget = (widgetName) => {\r\n    // filter out widget by name\r\n    const filteredWidgets = widgets.filter((widget) => widget.name !== widgetName);\r\n    setWidgets(filteredWidgets);\r\n\r\n    const deleteRegex = /^[^-]*[^ -]/;\r\n    const toDeleteId = parseInt(widgetName.charAt(widgetName.length - 1), 10);\r\n\r\n    widgets.forEach((widget) => {\r\n      // get name before dash & number after dash\r\n      const match = widget.name.match(deleteRegex);\r\n      const widgetId = parseInt(widget.name.charAt(widget.name.length - 1), 10);\r\n\r\n      if(widget.name === widgetName) {\r\n        // set widget display to one less\r\n        const currentDisplay = Lockr.get(`${match[0]}-display`);\r\n        Lockr.set(`${match[0]}-display`, currentDisplay - 1);\r\n        // remove widget data in LS\r\n        Lockr.rm(widget.name);\r\n        Lockr.rm(`geoLocation-${widgetId}`);\r\n      } else if (toDeleteId < widgetId) {\r\n        // new name with id of one less\r\n        const newName = `${match}-${widgetId - 1}`;\r\n        // saved data with key of original name\r\n        const oldKey = Lockr.get(widget.name);\r\n\r\n\r\n        // if saved data exists set key to match name and id\r\n        if (oldKey) {\r\n          Lockr.set(newName, oldKey);\r\n          Lockr.set(widget.name, undefined);\r\n          console.log(Lockr.get(newName));\r\n        }\r\n\r\n        console.log(newName);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  const handleToggleTap = () => {\r\n    toggleWidget(name);\r\n    setToggled(state => !state);\r\n  }\r\n\r\n  // pass widgets state\r\n    // for displaying list of current widgets & deleting \r\n    // useContext or LS for city name in list item\r\n\r\n    // if widget has multiple true & name included in widget key\r\n      // display list of current widgets in category\r\n    \r\n\r\n  return (\r\n    <>\r\n      {console.log(widgets)}\r\n      <SettingContainer>\r\n        <SettingContent>\r\n          {icon}\r\n          <SettingName>{formatedName}</SettingName>\r\n        </SettingContent>\r\n        {multiple ? \r\n        <Add addWidget={addWidget} name={name} /> :\r\n        <ToggleButton\r\n          animate={{\r\n            backgroundColor: toggled ? '#28a745' : '#dc3545',\r\n            scale: toggled ? 1 : 0.95,\r\n          }}\r\n          onTap={handleToggleTap}\r\n        >\r\n          <ToggleCircle \r\n            animate={{\r\n              x: toggled ? 10 : -10,\r\n            }}\r\n          />\r\n        </ToggleButton>}\r\n      </SettingContainer>\r\n      {\r\n        multiple && \r\n        <MultipleList>\r\n          {widgets.map((widget, i) => {\r\n            // name of widget before dash and id\r\n            const widgetRegex = /^[^-]*[^ -]/;\r\n            const widgetString = widget.name.match(widgetRegex);\r\n\r\n            if(widget.name.includes(name)) {\r\n              return (\r\n                widget.name.includes('Weather') && Lockr.get(widget.name) !== undefined ?\r\n                <div key={i} >\r\n                  <p>{_.startCase(widgetString)} in {Lockr.get(widget.name).city}</p>\r\n                  <Delete size='24' onClick={() => deleteWidget(widget.name)} />\r\n                </div> :\r\n                <div key={i} >\r\n                  <p>{_.startCase(widget.name)}</p>\r\n                  <Delete size='24' onClick={() => deleteWidget(widget.name)} />\r\n                </div>\r\n              )\r\n            }\r\n          })}\r\n        </MultipleList>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Setting;","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\AddWidgets.js",["129"],"import { useContext } from 'react'; \r\nimport _ from 'lodash';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { Close } from '@styled-icons/evaicons-solid/Close';\r\nimport { motion } from 'framer-motion';\r\nimport { SettingsContext } from '../../../context/SettingsContext';\r\nimport widgetData from '../../../data/widgetData';\r\nimport AddWidgetItem from './AddWidgetItem';\r\n\r\n// Make AddWidgetItem.js - map widget data & pass multiple as prop\r\n\r\n// Settings data with sections & options in the sections\r\n\r\n// Map settings data & display sections with options\r\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n  // options are previews of the widget!\r\n  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n\r\n\r\n// Logic for options in their own files\r\n\r\n// create widget adding ui\r\n  // overlay with widgets by section\r\n    // Misc - Search, Time, Calendar, Email\r\n    // Weather - Current Weather, 7 Day Forecast,\r\n    // Tab Manager - Save All, Select tabs, Custom\r\n    // Feeds - Twitter, YT, Reddit, Twitch \r\n    // Notes - Add folder, Add page, Add quick note\r\n\r\n// Move logic for adding to this file\r\n\r\n// -----------------------------------\r\n\r\n// create widget editing ui\r\n  // on edit widgets click all widgets indicate they are in edit mode (darken? shake?) with an edit icon & delete icon in top left corner\r\n\r\n// Move logic for deleting to EditWidget.js (avoid adding to each individual widget component)\r\n// Add logic for editing widgets to each widget \r\n  // Search, Weather\r\n\r\nconst Container = styled(motion.div)`\r\n  position: absolute;\r\n  top: 10%; \r\n  left: 0;\r\n  right: 0;\r\n  height: 75%;\r\n  width: 80%;\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  background-color: ${({ theme }) => theme.background};\r\n  border-radius: 5px;\r\n  z-index: 10;\r\n`;\r\n\r\nconst CloseAnimationWrapper = styled(motion.div)`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CloseIcon = styled(Close)`\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n  grid-gap: 16px;\r\n  margin: 70px 16px 16px 16px;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst AddWidgets = () => {\r\n  const theme = useContext(ThemeContext);\r\n  const [settings, setSettings] = useContext(SettingsContext);\r\n\r\n  const handleClose = () => {\r\n    setSettings({\r\n      addWidgets: false,\r\n      drawer: false,\r\n      editWidgets: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      initial='invisible'\r\n      animate={settings.addWidgets ? 'visible' : 'invisible'}\r\n      variants={{\r\n        visible: { \r\n          opacity: 1, \r\n          display: 'block',\r\n          transition: { delay: .5 }\r\n        },\r\n        invisible: { \r\n          display: 'none',\r\n          opacity: 0, \r\n          transition: { delay: 0 }\r\n        }\r\n      }}\r\n    >\r\n      <CloseAnimationWrapper\r\n        whileHover={{\r\n          scale: 1.1,\r\n          backgroundColor: theme.highlight,\r\n        }}\r\n        whileTap={{ scale: 0.95 }}\r\n        onClick={handleClose}\r\n      >\r\n        <CloseIcon size='32' />\r\n      </CloseAnimationWrapper>\r\n      <Grid>\r\n        {\r\n          widgetData.map(({ name, icon, multiple }, i) => {\r\n            return (\r\n              <AddWidgetItem \r\n                key={i}\r\n                name={name} \r\n                icon={icon} \r\n                multiple={multiple}\r\n              />\r\n            )\r\n          })\r\n        }\r\n      </Grid>\r\n    </Container>\r\n  )\r\n};\r\n\r\nexport default AddWidgets;","E:\\PROJECTS\\dash-v2\\src\\context\\SettingsContext.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\settings\\widgets\\AddWidgetItem.js",["130"],"import { useContext, useState } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { AddCircle } from '@styled-icons/ionicons-outline/AddCircle';\r\nimport _ from 'lodash';\r\nimport Lockr from 'lockr';\r\nimport widgetData from '../../../data/widgetData';\r\nimport { WidgetContext } from '../../../context/WidgetContext';\r\n\r\n\r\nconst GridItem = styled(motion.div)`\r\n  width: 100%;\r\n  height: 150px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 2px solid ${({ theme }) => theme.border};\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ItemHeading = styled.h4`\r\n  margin: 8px 0;\r\n`;\r\n\r\nconst AddIcon = styled(AddCircle)`\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst ToggleButton = styled(motion.button)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 50px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nconst ToggleCircle = styled(motion.div)`\r\n  width: 26px;\r\n  height: 26px;\r\n  background-color: ${({ theme }) => theme.color};\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst AddWidgetItem = ({ name, icon, multiple }) => {\r\n  const theme = useContext(ThemeContext);\r\n  const [widgets, setWidgets] = useContext(WidgetContext);\r\n  const [toggled, setToggled] = useState(Lockr.get(`${name}-display`));\r\n\r\n\r\n  const handleToggleWidget = (widgetName) => {\r\n    const currentWidget = widgetData.filter(widget => widget.name === widgetName);\r\n\r\n    if(!currentWidget[0].display) {\r\n      currentWidget[0].display = true;\r\n      Lockr.set(`${currentWidget[0].name}-display`, true);\r\n      setWidgets(state => [...state, ...currentWidget])\r\n    } else {\r\n      currentWidget[0].display = false;\r\n      Lockr.set(`${currentWidget[0].name}-display`, false);\r\n      setWidgets(state => state.filter(widget => widget.name !== currentWidget[0].name));\r\n    }\r\n  }\r\n\r\n  const handleAddWidget = (widgetName) => {\r\n    // map widgets to get widget selected to add\r\n    const newWidget = widgetData.map((widget) => {\r\n      if (widget.name === widgetName) {\r\n        widget.display++\r\n        Lockr.set(`${widgetName}-display`, widget.display);\r\n        return {\r\n          ...widget,\r\n          name: `${widgetName}-${widget.display}`,\r\n        };\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }).filter(wid => wid !== undefined);\r\n\r\n    setWidgets(state => [...state, ...newWidget]);\r\n  }\r\n\r\n  const handleToggleClick = () => {\r\n    handleToggleWidget(name);\r\n    setToggled(state => !state);\r\n  }\r\n\r\n  return (\r\n    <GridItem\r\n      whileHover={{\r\n        backgroundColor: theme.highlight,\r\n        scale: 1.025,\r\n      }}\r\n      onClick={() => {\r\n        multiple ?\r\n        handleAddWidget(name) :\r\n        handleToggleClick();\r\n      }}\r\n    >\r\n      {icon}\r\n      <ItemHeading>{_.startCase(name)}</ItemHeading>\r\n      {\r\n        multiple ? \r\n        <AddIcon size='32' /> :\r\n        <ToggleButton\r\n          animate={{\r\n            backgroundColor: toggled ? '#28a745' : '#dc3545',\r\n            scale: toggled ? 1 : 0.95,\r\n          }}\r\n        >\r\n          <ToggleCircle \r\n            animate={{\r\n              x: toggled ? 10 : -10,\r\n            }}\r\n          />\r\n        </ToggleButton>\r\n      }\r\n    </GridItem>\r\n  )\r\n}\r\n\r\nexport default AddWidgetItem;","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\SettingsModal.js",["131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import { useRef, useContext, useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { Images } from '@styled-icons/boxicons-regular/Images';\r\nimport { ColorSwatch } from '@styled-icons/heroicons-outline/ColorSwatch';\r\nimport { Layers } from '@styled-icons/ionicons-outline/Layers';\r\nimport { Notepad } from '@styled-icons/boxicons-regular/Notepad';\r\nimport _ from 'lodash';\r\nimport Setting from './Setting';\r\nimport { Open, Close } from './SettingsToggle';\r\nimport Background from '../background/Background';\r\nimport WidgetSettings from '../widgets/WidgetSettings';\r\nimport Theme from '../Theme';\r\nimport { SettingsContext } from '../../../context/SettingsContext';\r\nimport Tabs from './Tabs';\r\n\r\n// Selected state in TabsNav\r\n  // passed down to all tabs & if true render that tab\r\n  // on tab click set selected to that tab name\r\n// Array of tab names passed to TabsNav to map & display\r\n\r\n// Change to settings tabs - like notion\r\n  // tabs sidebar on left content on right\r\n// TabsNav.js - tabs sidebar\r\n  // diplay settings sections\r\n  // on click display setting content on right & highlight clicked tab\r\n// Tab.js - tab content\r\n  // Display content on right if props selected is true\r\n\r\nconst Drawer = styled(motion.div)`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 400px;\r\n  height: 100vh;\r\n  background-color: ${({ theme }) => theme.background};\r\n  overflow-y: scroll;\r\n  z-index: 2\r\n`;\r\n\r\nconst Container = styled(motion.div)`\r\n  width: 92.5%;\r\n  margin: 0 auto;\r\n  margin-top: 80px;\r\n  overflow: none;\r\n`;\r\n\r\nconst Test = styled.div`\r\n  color: white;\r\n`;\r\n\r\nconst settingsData = (themeState, changeTheme) => {\r\n  return (\r\n    [\r\n      {\r\n        title: 'theme',\r\n        panel: <Theme theme={themeState} changeTheme={changeTheme} />,\r\n      },\r\n      {\r\n        title: 'background',\r\n        panel: <Background />,\r\n      },\r\n      {\r\n        title: 'widgets',\r\n        panel: <WidgetSettings />,\r\n      },\r\n      {\r\n        title: 'notes',\r\n        panel: <Test>Test</Test>,\r\n      }\r\n    ]\r\n  )\r\n}\r\n\r\nconst containerVariants = {\r\n  open: {\r\n    transition: { staggerChildren:  0.1, delayChildren: 0.2, }\r\n  },\r\n  closed: {\r\n    transition: { staggerChildren: 0.05, staggerDirection: -1 }\r\n  }\r\n}\r\n\r\nconst ModalOverlay = styled(motion.div)`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  opacity: 0.6;\r\n  z-index: 10;\r\n`;\r\n\r\nconst Modal = styled.div`\r\n  position: absolute;\r\n  top: 10%; \r\n  left: 0;\r\n  right: 0;\r\n  height: 75%;\r\n  width: 80%;\r\n  max-width: 1000px;\r\n  margin: 0 auto;\r\n  background-color: ${({ theme }) => theme.background};\r\n  border-radius: 5px;\r\n  z-index: 10;\r\n`;\r\n\r\nconst PanelContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 70%;\r\n  height: 100%;\r\n  border-left: 1px solid ${({ theme }) => theme.highlight};\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst PanelTitle = styled.p`\r\n  margin: 32px 16px 16px 16px;\r\n  padding: 10px;\r\n  color: ${({ theme }) => theme.color};\r\n  font-size: 1.1rem;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid ${({ theme }) => theme.highlight};\r\n`;\r\n\r\n// https://material-ui.com/components/tabs/\r\n// https://codeburst.io/build-responsive-tabs-using-react-js-86cc3514c881\r\n// https://react-bootstrap.github.io/components/tabs/\r\n// https://www.digitalocean.com/community/tutorials/react-tabs-component\r\n\r\n        // on tab click render appropriate content on right\r\n          // have state in modal component\r\n          // pass down function to change state\r\n\r\n        // depending on state is which settings content is displayed\r\n          // in TabsPannel use tab state to render correct content\r\n            // if statement?\r\n            // map settings data & use title & tab state in if statement\r\n\r\n\r\n        {/* Tabs Nav */}\r\n\r\n        {/* <Tabs>\r\n          <Tab label='Theme' index={0} />\r\n        </Tabs> */}\r\n\r\n        {/* Tabs Content */}\r\n\r\n        {/* <TabPanel index={0} >\r\n          <ThemeSettings />\r\n        </TabPanel> */}\r\n\r\nconst SettingsModal = ({ themeState, changeTheme }) => {\r\n  const [settings, setSettings] = useContext(SettingsContext);\r\n  const [selected, setSelected] = useState('theme');\r\n  const modalRef = useRef(null);\r\n\r\n  // ---------------------------------------------------\r\n  // Add modal overlay & on click modal is set to false\r\n  // ---------------------------------------------------\r\n\r\n\r\n   useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if(modalRef.current && modalRef.current === e.target) {\r\n        setSettings({\r\n          addWidgets: false,\r\n          drawer: false,\r\n          editWidgets: false,\r\n        });\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    }\r\n  }, [modalRef]);\r\n\r\n  return (\r\n    <>\r\n      <Open />\r\n      <ModalOverlay\r\n        ref={modalRef}\r\n        initial='invisible'\r\n        animate={settings.drawer ? 'visible' : 'invisible'}\r\n        variants={{\r\n          visible: { \r\n            opacity: 1, \r\n            display: 'block',\r\n            scale: 1,\r\n          },\r\n          invisible: { \r\n            scale: 0.95,\r\n            opacity: 0, \r\n            display: 'none',\r\n          }\r\n        }}\r\n      >\r\n        <Modal>\r\n          <Close />\r\n          <Tabs selected={selected} setSelected={setSelected} />\r\n          {settingsData(themeState, changeTheme).map(({ panel, title }) => (\r\n            selected === title &&\r\n            <PanelContainer>\r\n              <PanelTitle>{_.startCase(title)}</PanelTitle>\r\n              {panel}\r\n            </PanelContainer>\r\n          ))}\r\n        </Modal>\r\n      </ModalOverlay>\r\n    </>\r\n  )\r\n}\r\n\r\n// const SettingsMenu = ({ themeState, changeTheme }) => {\r\n//   const drawerRef = useRef(null);\r\n//   const theme = useContext(ThemeContext);\r\n//   const [settings, setSettings] = useContext(SettingsContext);\r\n\r\n\r\n//   // used for click outside of settings menu to close it\r\n\r\n//   // useEffect(() => {\r\n//   //   const handleClickOutside = (e) => {\r\n//   //     if(drawerRef.current && !drawerRef.current.contains(e.target)) {\r\n//   //       handleClose();\r\n//   //       gearAnimation.start({ display: 'block', opacity: 1, transition: { delay: 0.7 }});\r\n//   //     }\r\n//   //   }\r\n\r\n//   //   document.addEventListener('mousedown', handleClickOutside);\r\n\r\n//   //   return () => {\r\n//   //     document.removeEventListener('mousedown', handleClickOutside);\r\n//   //   }\r\n//   // }, [drawerRef, gearAnimation]);\r\n\r\n//   return (\r\n//     <>\r\n//       <Open />\r\n//       <Drawer\r\n//         ref={drawerRef}\r\n//         initial='closed'\r\n//         animate={settings.drawer ? 'open' : 'closed'}\r\n//         variants={{\r\n//           open: { x: 0 },\r\n//           closed: { x: 400, transition: { delay: 0.5, x: { stiffness: 500 }}},\r\n//         }}\r\n//         transition={{ ease: 'anticipate', duration: .45 }}\r\n//       >\r\n//         <Close />\r\n//         <Container\r\n//           variants={containerVariants}\r\n//         >\r\n//           {settingsData(theme.color, themeState, changeTheme).map(({ title, icon, section }, i) => (\r\n//             <Setting \r\n//               key={i}\r\n//               title={title} \r\n//               icon={icon} \r\n//               section={section}\r\n//             />\r\n//           ))}\r\n//         </Container>\r\n//       </Drawer>\r\n//     </>\r\n//   )\r\n// };\r\n\r\nexport default SettingsModal;","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\SettingsToggle.js",["145"],"import { useContext } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { Settings as Gear } from '@styled-icons/material/Settings';\r\nimport { ArrowForward } from '@styled-icons/material-rounded/ArrowForward';\r\nimport { Close as CloseSolid } from '@styled-icons/evaicons-solid/Close';\r\nimport { SettingsContext } from '../../../context/SettingsContext';\r\n\r\nconst GearAnimationWrapper = styled(motion.div)`\r\n  position: absolute;\r\n  top: 22px;\r\n  right: 22px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 8px;\r\n  background-color: ${({ theme }) => theme.background};\r\n  border-radius: 50%;\r\n  z-index: 2;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst GearIcon = styled(Gear)`\r\n  opacity: 0.87;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst CloseAnimationWrapper = styled(motion.div)`\r\n  position: absolute;\r\n  top: 22px;\r\n  right: 22px;\r\n  width: 32px;\r\n  height: 32px;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  z-index: 2;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst CloseIcon = styled(CloseSolid)`\r\n  opacity: 0.87;\r\n  color: ${({ theme }) => theme.color};\r\n`;\r\n\r\nconst toggleVariants = {\r\n  invisible: {\r\n    opacity: 0,\r\n  },\r\n  visible: {\r\n    opacity: 1,\r\n  },\r\n}\r\n\r\nconst Open = ({ onClick, animate, sequence, variants }) => {\r\n  const [settings, setSettings] = useContext(SettingsContext);\r\n\r\n  const handleOpen = () => {\r\n    setSettings({\r\n      drawer: true,\r\n      editWidgets: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GearAnimationWrapper\r\n      onClick={handleOpen}\r\n      initial='closed'\r\n      animate={settings.drawer ? 'invisible' : 'visible'}\r\n      variants={toggleVariants}\r\n      whileHover={{\r\n        rotate: 90,\r\n        scale: 1.1,\r\n      }}\r\n      whileTap={{ scale: 0.95 }}\r\n    >\r\n      <GearIcon \r\n        size='32'\r\n        color='white'\r\n      />\r\n    </GearAnimationWrapper>\r\n  )\r\n};\r\n\r\nconst Close = ({ onClick, sequence, animation }) => {\r\n  const theme = useContext(ThemeContext);\r\n  const [settings, setSettings] = useContext(SettingsContext);\r\n\r\n  const handleClose = () => {\r\n    setSettings({\r\n      drawer: false,\r\n      editWidgets: false,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <CloseAnimationWrapper\r\n      onClick={handleClose}\r\n      initial='invisible'\r\n      animate={settings.drawer ? 'visible' : 'invisible'}\r\n      variants={toggleVariants}\r\n      whileHover={{\r\n        //rotate: 90,\r\n        scale: 1.1,\r\n        backgroundColor: theme.highlight,\r\n      }}\r\n      whileTap={{ scale: 0.95 }}\r\n      transition={{ delay: 0 }}\r\n    >\r\n    <motion.div\r\n      style={{\r\n        width: '40px',\r\n        height: '40px',\r\n        borderRadius: '50%',\r\n      }}\r\n    >\r\n      <CloseIcon \r\n        size='32' \r\n        color='white'\r\n      />\r\n    </motion.div>\r\n    </CloseAnimationWrapper>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport { \r\n  Open, \r\n  Close,\r\n};","E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\Setting.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\settings\\modal\\Tabs.js",["146"],"import { useContext, useState } from 'react';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { motion } from 'framer-motion';\r\nimport { Images } from '@styled-icons/boxicons-regular/Images';\r\nimport { ColorSwatch } from '@styled-icons/heroicons-outline/ColorSwatch';\r\nimport { Layers } from '@styled-icons/ionicons-outline/Layers';\r\nimport { Notepad } from '@styled-icons/boxicons-regular/Notepad';\r\nimport _ from 'lodash';\r\n\r\nconst TabsContainer = styled.div`\r\n  width: 30%;\r\n  height: 100%;\r\n  background-color: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.color};\r\n  border-radius: 5px 0 0 5px;\r\n`;\r\n\r\nconst Title = styled.p`\r\n  margin: 0;\r\n  padding: 20px;\r\n  color: ${({ theme }) => theme.color};\r\n  opacity: .7;\r\n`;\r\n\r\nconst Tab = styled(motion.div)`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.highlight};\r\n  }\r\n`;\r\n\r\nconst TabTitle = styled.p`\r\n  display: inline-block;\r\n  margin: 0;\r\n  margin-left: 5px;\r\n  font-size: 1rem;\r\n`;\r\n\r\nconst tabsData = (color) => (\r\n  [\r\n    { \r\n      title: 'theme', \r\n      icon: <ColorSwatch size='20' color={color} /> \r\n    },\r\n    {\r\n      title: 'background',\r\n      icon: <Images size='20' color={color} />,\r\n    },\r\n    {\r\n      title: 'widgets',\r\n      icon: <Layers size='20' color={color} />,\r\n    },\r\n    {\r\n      title: 'notes',\r\n      icon: <Notepad size='20' color={color} />,\r\n    },\r\n  ]\r\n);\r\n\r\nconst Tabs = ({ selected, setSelected }) => {\r\n  const theme = useContext(ThemeContext);\r\n\r\n  // map tabs array & create tab for each\r\n  return (\r\n    <TabsContainer>\r\n      <Title>Settings</Title>\r\n      {tabsData(theme.color).map(({ title, icon }) => {\r\n        return (\r\n          <Tab\r\n            style={{\r\n              backgroundColor: selected === title && theme.highlight,\r\n            }}\r\n            onClick={() => setSelected(title)}\r\n          >\r\n            {icon}\r\n            <TabTitle\r\n              style={{\r\n                fontSize: selected === title ? '1.05rem' : '1rem',\r\n              }}\r\n            >\r\n              {_.startCase(title)}\r\n            </TabTitle>\r\n          </Tab>\r\n        )\r\n      })}\r\n    </TabsContainer>\r\n  )\r\n}\r\n\r\nexport default Tabs;","E:\\PROJECTS\\dash-v2\\src\\context\\BackgroundContext.js",[],"E:\\PROJECTS\\dash-v2\\src\\components\\widgets\\EditButtons.js",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":1,"column":20,"nodeType":"153","messageId":"154","endLine":1,"endColumn":30},{"ruleId":"151","severity":1,"message":"155","line":1,"column":27,"nodeType":"153","messageId":"154","endLine":1,"endColumn":36},{"ruleId":"151","severity":1,"message":"156","line":84,"column":10,"nodeType":"153","messageId":"154","endLine":84,"endColumn":18},{"ruleId":"151","severity":1,"message":"157","line":1,"column":22,"nodeType":"153","messageId":"154","endLine":1,"endColumn":30},{"ruleId":"151","severity":1,"message":"158","line":6,"column":8,"nodeType":"153","messageId":"154","endLine":6,"endColumn":9},{"ruleId":"151","severity":1,"message":"159","line":9,"column":8,"nodeType":"153","messageId":"154","endLine":9,"endColumn":15},{"ruleId":"151","severity":1,"message":"160","line":45,"column":7,"nodeType":"153","messageId":"154","endLine":45,"endColumn":14},{"ruleId":"161","severity":1,"message":"162","line":290,"column":6,"nodeType":"163","endLine":290,"endColumn":12,"suggestions":"164"},{"ruleId":"165","severity":1,"message":"166","line":231,"column":36,"nodeType":"167","messageId":"168","endLine":231,"endColumn":38},{"ruleId":"151","severity":1,"message":"158","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":9},{"ruleId":"151","severity":1,"message":"169","line":55,"column":10,"nodeType":"153","messageId":"154","endLine":55,"endColumn":17},{"ruleId":"151","severity":1,"message":"170","line":3,"column":18,"nodeType":"153","messageId":"154","endLine":3,"endColumn":30},{"ruleId":"151","severity":1,"message":"171","line":4,"column":10,"nodeType":"153","messageId":"154","endLine":4,"endColumn":16},{"ruleId":"151","severity":1,"message":"172","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":21},{"ruleId":"151","severity":1,"message":"173","line":6,"column":10,"nodeType":"153","messageId":"154","endLine":6,"endColumn":16},{"ruleId":"151","severity":1,"message":"174","line":7,"column":10,"nodeType":"153","messageId":"154","endLine":7,"endColumn":17},{"ruleId":"151","severity":1,"message":"159","line":9,"column":8,"nodeType":"153","messageId":"154","endLine":9,"endColumn":15},{"ruleId":"151","severity":1,"message":"175","line":30,"column":7,"nodeType":"153","messageId":"154","endLine":30,"endColumn":13},{"ruleId":"151","severity":1,"message":"176","line":41,"column":7,"nodeType":"153","messageId":"154","endLine":41,"endColumn":16},{"ruleId":"151","severity":1,"message":"177","line":75,"column":7,"nodeType":"153","messageId":"154","endLine":75,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":143,"column":9,"nodeType":"180","messageId":"181","endLine":143,"endColumn":25},{"ruleId":"178","severity":1,"message":"179","line":145,"column":9,"nodeType":"180","messageId":"181","endLine":147,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":149,"column":9,"nodeType":"180","messageId":"181","endLine":149,"endColumn":29},{"ruleId":"178","severity":1,"message":"179","line":151,"column":9,"nodeType":"180","messageId":"181","endLine":153,"endColumn":24},{"ruleId":"161","severity":1,"message":"182","line":181,"column":6,"nodeType":"163","endLine":181,"endColumn":16,"suggestions":"183"},{"ruleId":"151","severity":1,"message":"184","line":5,"column":10,"nodeType":"153","messageId":"154","endLine":5,"endColumn":22},{"ruleId":"151","severity":1,"message":"157","line":1,"column":22,"nodeType":"153","messageId":"154","endLine":1,"endColumn":30},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'saveToLS' is defined but never used.","'useState' is defined but never used.","'_' is defined but never used.","'Setting' is defined but never used.","'AddIcon' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'display'. Either include it or remove the dependency array.","ArrayExpression",["187"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'widgets' is assigned a value but never used.","'ThemeContext' is defined but never used.","'Images' is defined but never used.","'ColorSwatch' is defined but never used.","'Layers' is defined but never used.","'Notepad' is defined but never used.","'Drawer' is assigned a value but never used.","'Container' is assigned a value but never used.","'containerVariants' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has a missing dependency: 'setSettings'. Either include it or remove the dependency array.",["188"],"'ArrowForward' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [data, display]",{"range":"193","text":"194"},"Update the dependencies array to be: [modalRef, setSettings]",{"range":"195","text":"196"},[7051,7057],"[data, display]",[4934,4944],"[modalRef, setSettings]"]